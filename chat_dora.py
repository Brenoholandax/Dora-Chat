# -*- coding: utf-8 -*-
"""Chat-Dora.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vY0NYzYute0AvAWNPxHDyy0CRuoJgKtq

**InstalaÃ§Ã£o + Tokens**
"""

!pip install flask pyngrok twilio pydantic-ai mysql-connector-python --quiet

# Configure as chaves
NGROK_TOKEN = "2wPAeTNLejSgChJDOBFqXphzfG0_PBwFHBki77WsWp28pX88"
OPENAI_KEY = "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"

# Ativa ngrok
from pyngrok import conf, ngrok
conf.get_default().auth_token = NGROK_TOKEN
public_url = ngrok.connect(5000)
print(f"ðŸ”— Webhook para o Twilio: {public_url}/sms")

"""** CÃ©lula 2 â€“ Bot com IA e agente de banco de dados**"""

# ImportaÃ§Ãµes principais
from flask import Flask, request, Response
from twilio.twiml.messaging_response import MessagingResponse
from pydantic_ai import Agent
from pydantic import BaseModel
import os, mysql.connector

# Configura OpenAI
os.environ["OPENAI_API_KEY"] = OPENAI_KEY

# Define o modelo de entrada
class MessageInput(BaseModel):
    user_message: str

# Cria o agente principal
agent = Agent(
    system_message="VocÃª Ã© um assistente virtual inteligente via WhatsApp.",
    input_model=MessageInput,
    model="gpt-4o"
)

# Agente de banco de dados
def consultar_banco(query: str) -> str:
    try:
        conn = mysql.connector.connect(
            host="master.mysql.sjcc.com.br",
            user="chatbot-dora",
            password="b9e,97}I)T=1f6/&ewzO",
            database="chatbot-dora"
        )
        cursor = conn.cursor()
        cursor.execute(query)
        resultados = cursor.fetchall()
        colunas = [desc[0] for desc in cursor.description]
        conn.close()

        if not resultados:
            return "Nenhum resultado encontrado."

        resposta_formatada = "\n".join(
            ", ".join(str(valor) for valor in linha) for linha in resultados
        )
        return f"Resultados encontrados:\n{resposta_formatada}"
    except Exception as e:
        return f"Erro ao consultar o banco: {str(e)}"

# FunÃ§Ã£o que decide se usa o agente IA ou o SQL
def gerar_resposta(mensagem_usuario: str) -> str:
    if mensagem_usuario.lower().startswith("sql:"):
        query = mensagem_usuario[4:].strip()
        return consultar_banco(query)

    entrada = MessageInput(user_message=mensagem_usuario)
    resposta = agent.run_sync(entrada)
    return resposta.output

"""*** Flask server e endpoint WhatsApp***"""

# Inicia o app Flask
app = Flask(__name__)

@app.route("/sms", methods=["POST"])
def sms_reply():
    mensagem = request.form.get("Body", "")
    resposta = gerar_resposta(mensagem)
    resposta_twilio = MessagingResponse()
    resposta_twilio.message(resposta)
    return Response(str(resposta_twilio), mimetype="application/xml")

app.run()